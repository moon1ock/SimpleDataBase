 package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    // some private attributes of a class

    private JoinPredicate p;
    private boolean flag; // flag to see if joined tuples were calculated yet
    ArrayList<Tuple> children1 = new ArrayList<Tuple>();
    ArrayList<Tuple> children2 = new ArrayList<Tuple>();
    private OpIterator child1;
    private OpIterator child2;
    private ArrayList<Tuple> joinedchildren; // all joined tuples
    private Iterator<Tuple> iterator; //iterator over joined children

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     *
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {

        // some code goes here
        this.p = p;
        this.child1 = child1;
        this.child2 = child2;
        this.joinedchildren = new ArrayList<Tuple>();
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return this.p;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        return this.child1.getTupleDesc().getFieldName(p.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        return this.child2.getTupleDesc().getFieldName(p.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        return TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        super.open();
        this.child1.open();
        this.child2.open();
        this.iterator = null;
        this.flag = false;

        //populate  the list with all children to join them later
       while(child1.hasNext()) {
           children1.add(child1.next());
       }
       while(child2.hasNext()) {
           children2.add(child2.next());
       }
    }

    public void close() {
        // some code goes here
        super.close();
        this.child1.close();
        this.child2.close();

    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        this.close();
        this.open();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here

        if(!flag) {
            // mayDO: use sets to remove dublicates
            // nested loops: inefficient, yet simple
            for(Tuple c1 : children1) {
                for(Tuple c2 : children2) {
                    if(p.filter(c1, c2)) {
                        TupleDesc td = this.getTupleDesc();
                        Tuple tuple = new Tuple(td);
                        int i = 0; // taking the iterating counter out of the loop will serve as the index in the array for joined children
                        for(i = 0; i < c1.getTupleDesc().numFields(); i++) {
                            tuple.setField(i, c1.getField(i));
                            // System.out.println("index: " +i);
                        }
                        for(int j = 0; j < c2.getTupleDesc().numFields(); j++) {
                            tuple.setField(i++, c2.getField(j));
                            // System.out.println("index: " +j);
                        }
                        this.joinedchildren.add(tuple);
                    }
                }
            }
            this.flag = true;
            this.iterator = joinedchildren.iterator();
        }
        if(this.iterator.hasNext()) {
            return this.iterator.next();
        } else {
            return null;
        }
    }

    @Override
    public OpIterator[] getChildren() {
        // some code goes here
        OpIterator[] children = {child1, child2}; // crafting an array of children
        return children;
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // some code goes here
        this.child1 = children[0];
        this.child2 = children[1];
    }

}
